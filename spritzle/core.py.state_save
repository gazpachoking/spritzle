#
# spritzle/core.py
#
# Copyright (C) 2016 Andrew Resch <andrewresch@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.    If not, write to:
#   The Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor
#   Boston, MA    02110-1301, USA.
#

import libtorrent as lt
import pkg_resources
import os

from spritzle.config import Config
from spritzle.alert import Alert

class Core(object):
    def __init__(self):
        pass

    def init(self, config_dir):
        self.config = Config('spritzle.conf', config_dir)

        version = pkg_resources.require("spritzle")[0].version
        version = [int(value.split("-")[0]) for value in version.split(".")]

        while len(version) < 4:
            version.append(0)

        self.session = lt.session({'alert_mask': lt.alert.category_t.all_categories})
        self.load_state()

        self.alert = Alert(self.session)

    def get_state_dir(self):
        state_dir = os.path.join(
            os.path.expanduser('~'), 
            '.local', 
            'share',
            'spritzle'
        )
        if not os.path.isdir(state_dir):
            os.makedirs(state_dir)
        
        return state_dir

    def get_lt_state_file_path(self):
        return os.path.join(self.get_state_dir(), "lt_state.bencode")

    def save_state(self):
        with open(self.get_lt_state_file_path(), "wb") as f:
            f.write(lt.bencode(self.session.save_state()))
        
    def load_state(self):
        path = self.get_lt_state_file_path()
        if os.path.exists(path):
            with open(path, "rb") as f:
                self.session.load_state(lt.bdecode(f.read()))


core = Core()